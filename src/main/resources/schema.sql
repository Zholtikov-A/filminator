CREATE SCHEMA IF NOT EXISTS filminator;

CREATE TABLE IF NOT EXISTS filminator.users
(
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(254) NOT NULL UNIQUE,
    login VARCHAR(40) NOT NULL UNIQUE,
    name VARCHAR(40) NOT NULL,
    birthday DATE
);

CREATE TABLE IF NOT EXISTS filminator.genre
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(40) NOT NULL
);

CREATE TABLE IF NOT EXISTS filminator.mpa_rating
(
    mpa_rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(40) NOT NULL
);

create table IF NOT EXISTS filminator.directors
(
    director_id INTEGER auto_increment,
    name      VARCHAR_IGNORECASE(50),
    constraint DIRECTOR_PK
        primary key (director_id)
);


CREATE TABLE IF NOT EXISTS filminator.films
(
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(200),
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    mpa_rating_id INTEGER,
    rate INTEGER,
    FOREIGN KEY (mpa_rating_id) REFERENCES mpa_rating(mpa_rating_id)
);

CREATE TABLE IF NOT EXISTS filminator.likes_films_users_link
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    FOREIGN KEY (film_id) REFERENCES films(film_id) ON delete CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS filminator.friendship_user_to_user_link
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (friend_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS filminator.films_genre_link
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    FOREIGN KEY (film_id) REFERENCES filminator.films(film_id) ON delete CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genre(genre_id)
);

create table IF NOT EXISTS filminator.film_directors
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id     INTEGER not null,
    director_id INTEGER not null,
       FOREIGN KEY (film_id) REFERENCES filminator.films(film_id) ON delete CASCADE,
        FOREIGN KEY (director_id) REFERENCES directors(director_id)
);

-- create table IF NOT EXISTS filminator.film_directors
--(
 --   film_id     INTEGER not null,
  --  director_id INTEGER not null,
   -- constraint FILM_DIRECTORS_PK
    --    primary key (FILM_ID, DIRECTOR_ID),
  --  constraint FILM_DIRECTORS_FILM_ID_FK
   --     foreign key (FILM_ID) references filminator.films,
  --  constraint FILM_DIRECTORS_DIRECTOR_ID_FK
   --     foreign key (DIRECTOR_ID) references filminator.directors
    --        on update set null on delete set null
--);

ALTER TABLE filminator.films_genre_link
ADD UNIQUE (film_id, genre_id)
;

ALTER TABLE filminator.film_directors
ADD UNIQUE (film_id, director_id)
;